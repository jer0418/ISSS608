---
title: "Hands-on_Ex05e"
---

# **16  Treemap Visualisation with R**

## **16.1 Overview**

A **treemap** is a visualization technique that represents hierarchical data using nested rectangles. Each rectangle's size corresponds to a value, making it effective for comparing proportions within a dataset. Treemaps are particularly useful for displaying complex data structures in a compact and intuitive way.

This hands-on exercise focuses on designing treemaps in **R** using appropriate packages. It starts with data manipulation, transforming transaction data into a suitable structure using `dplyr`. Then, static treemaps are created with the `treemap` package, followed by interactive treemaps using `d3treeR`. Through this process, the exercise covers both fundamental and advanced aspects of treemap visualization.

## **16.2 Overview**

::: panel-tabset
## Installing & Launching R Packages

```{r}
#| warning: false
pacman::p_load(treemap, treemapify, tidyverse) 
```

## Importing Data

In this exercise, *REALIS2018.csv* data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).

```{r}
realis2018 <- read_csv("data/realis2018.csv",show_col_types = FALSE)
```

Using glimpse() we can observe there are 23205 rows and 20 columns in this dataframe

```{r}
glimpse(realis2018)
```

## Data Wrangling and Manipulation

The data.frame *realis2018* is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:

-   group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*, and

-   compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price (\$ psm)* and *Transacted Price (\$)* respectively.

Two key verbs of **dplyr** package, namely: *group_by()* and *summarize()* will be used to perform these steps.

*group_by()* breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.

Grouping affects the verbs as follows:

-   grouped *select()* is the same as ungrouped *select()*, except that grouping variables are always retained.

-   grouped *arrange()* is the same as ungrouped; unless you set *.by_group = TRUE*, in which case it orders first by the grouping variables.

-   *mutate()* and *filter()* are most useful in conjunction with window functions (like *rank()*, or *min(x) == x*). They are described in detail in vignette(“window-functions”).

-   *sample_n()* and *sample_frac()* sample the specified number/fraction of rows in each group.

-   *summarise()* computes the summary for each group.

In our case, *group_by()* will used together with *summarise()* to derive the summarised data.frame.

```{r}
realis2018_summarised <- realis2018 %>%
  group_by(`Project Name`, `Planning Region`,
           `Planning Area`, `Property Type`,
           `Type of Sale`) %>%
  summarise(
    `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
    `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
    `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
    `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE),
    .groups = "drop_last"   # This keeps the last grouping level
  )


```

The code chunk above shows a more efficient way to tackle the same processes by using the *pipe*, %\>%

```{r}
head(realis2018_summarised)
```
:::

## **16.3 Designing static treemap with treemap Package**

In this section, *treemap()* of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.

First, we will select records belongs to resale condominium property type from *realis2018_selected* data frame.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

### **16.3.2 Using the basic arguments**

The code chunk below designed a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
Things to learn from the three arguments used:

-   index

    -   The index vector must consist of at least two column names or else no hierarchy treemap will be plotted.

    -   If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.

-   vSize

    -   The column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.
:::

::: callout-warning
*Warning:*

The treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.

For *treemap()*, *vColor* is used in combination with the argument *type* to determines the colours of the rectangles. Without defining *type*, like the code chunk above, *treemap()* assumes type = index, in our case, the hierarchy of planning areas.
:::

### **16.3.3 Working with *vColor* and *type* arguments**

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
Thinking to learn from the conde chunk above.

-   The rectangles are coloured with different intensity of green, reflecting their respective median unit prices.

-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.
:::

### **16.3.4 Colours in treemap package**

The **mapping** and **palette** arguments control color assignment in treemaps. The key difference between `"value"` and `"manual"` lies in how colors are mapped to values:

-   **"value" mapping**: Uses a diverging color palette (e.g., `"RdYlBu"`) where **0** is assigned the middle color, negative values the left-end color, and positive values the right-end color based on their absolute range.

-   **"manual" mapping**: Assigns the **minimum** value to the left-end color, the **maximum** to the right-end color, and the **midpoint** of the range to the middle color.

Essentially, `"value"` emphasizes deviation from zero, while `"manual"` spreads colors evenly across the data range.

::: panel-tabset
## The "Value" Treeemap

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Thing to learn from the code chunk above:

-   although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.

-   The reason why we see only 5000 to 45000 in the legend is because the *range* argument is by default c(min(values, max(values)) with some pretty rounding.

## The "Manual" Treemap

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Things to learn from the code chunk above:

-   The colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative

To overcome this problem, a single colour palette such as Blues should be used.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
:::

### **16.3.5 Treemap Layout**

The `treemap()` function supports two layout algorithms: **"squarified"** and **"pivotSize"** (default).

-   **"squarified"** (Bruls et al., 2000) optimizes aspect ratios for better readability but ignores the sorting order of rectangles.

-   **"pivotSize"** (Bederson et al., 2002) maintains a reasonable aspect ratio while preserving the sorting order (`sortID`).

Essentially, **"squarified"** prioritizes shape balance, while **"pivotSize"** ensures a meaningful order in the layout.

::: panel-tabset
## Algorithm Argument

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified", #<<<
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## Using SortID

When “pivotSize” algorithm is used, *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
:::

## **16.4 Designing Treemap using treemapify Package**

**treemapify** is a R package specially developed to draw treemaps in **ggplot2**.

### **16.4.1 Designing a basic treemap**

**Step 1:** Plot the simple treemap with `ggplot()` and `geom_treemap()`.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

### **16.4.2 Defining hierarchy**

**Step 2:** Group by Planning Region

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
      geom_treemap() +
      theme(
      plot.title = element_text(hjust=0, family = "Bold"),
      plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
      legend.background = element_rect(fill="#f5f5f5"),
      panel.background = element_rect(fill="#f5f5f5"))   
```

**Step 3:** Adding boundary line!

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20") 
```

## **16.5 Designing Interactive Treemap using d3treeR**

### **16.5.1 Installing *d3treeR* package**

```{r}
library(devtools)

install_github("timelyportfolio/d3treeR")
library(d3treeR)
```

### **16.5.2 Designing An Interactive Treemap**

The codes below perform two processes.

1.  *treemap()* is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called ***tm***.

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

2.  Then *d3tree()* is used to build an interactive treemap.

```{r}
d3tree(tm,rootname = "Singapore" )
```
